{"version":3,"sources":["components/weather-item/weather-item.component.jsx","components/dashboard/dashboard.component.jsx","App.js","index.js"],"names":["dateBuilder","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","WeatherItem","data","className","name","sys","country","Date","Math","round","main","temp","weather","description","charAt","toUpperCase","slice","Dashboard","props","getBrowserPosition","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","getWeatherByLocation","latitude","longitude","a","fetch","state","openWeatherAPI","openWeatherKey","then","res","json","result","setState","query","lastOperation","type","refreshing","console","log","getWeatherByQuery","evt","key","undefined","q","triggerPositionQuery","position","coords","catch","err","alert","refreshLastWeather","this","placeholder","onChange","e","target","value","onKeyPress","onClick","React","Component","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.87cb9077.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './weather-item.styles.scss';\r\n\r\n// Funcao para retornar data atual formatada\r\nconst dateBuilder = (d) => {\r\n    let months = ['Janeiro', 'Fevereiro', 'Março', 'Abril', 'Maio', 'Junho', 'Julho', 'Agosto', 'Setembro', 'Outubro', 'Novembro', 'Dezembro'];\r\n    let days = ['Domingo', 'Segunda', 'Terça', 'Quarta', 'Quinta', 'Sexta', 'Sábado'];\r\n\r\n    let day = days[d.getDay()];\r\n    let date = d.getDate();\r\n    let month = months[d.getMonth()];\r\n    let year = d.getFullYear();\r\n\r\n    return `${day}, ${date} de ${month} de ${year}`\r\n};\r\n\r\n// Funcao retornando o componente\r\nconst WeatherItem = ({data}) => (\r\n    <div className='weather-item'>\r\n        <div className='location-box'>\r\n            <div className='location'>{data.name}, {data.sys.country}</div>\r\n            <div className='date'>{ dateBuilder(new Date()) }</div>\r\n        </div>\r\n\r\n        <div className='weather-box'>\r\n            <div className='temp'>\r\n                {Math.round(data.main.temp)}°c\r\n            </div>\r\n            <div className='weather'>\r\n              {data.weather[0].description.charAt(0).toUpperCase() + data.weather[0].description.slice(1)}\r\n            </div>\r\n        </div>\r\n    </div>\r\n);\r\n\r\nexport default WeatherItem;","import React from 'react';\r\n\r\nimport './dashboard.styles.scss';\r\n\r\nimport WeatherItem from '../weather-item/weather-item.component';\r\n\r\nclass Dashboard extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            openWeatherKey: 'd3c5928599c5c22e8bc6dd88ca81706d',\r\n            openWeatherAPI: 'api.openweathermap.org/data/2.5/',\r\n            query: '',\r\n            weather: {},\r\n            lastOperation: {}\r\n        };\r\n    }   \r\n    \r\n    // Funcao assincrona desenvolvida para buscar a localizacao do navegador\r\n    getBrowserPosition = () => {\r\n        return new Promise(function (resolve, reject) {\r\n            navigator.geolocation.getCurrentPosition(resolve, reject);\r\n        });\r\n    }\r\n\r\n    // Funcao utilizando a API do Open Weather com latitude e longitude\r\n    getWeatherByLocation = async (latitude, longitude) => {\r\n        fetch(`//${this.state.openWeatherAPI}weather?lat=${latitude}&lon=${longitude}&appid=${this.state.openWeatherKey}&units=metric&lang=pt_br`)\r\n        .then(res => res.json())\r\n        .then(result => {\r\n            this.setState({\r\n                query: '',\r\n                weather: result,\r\n                lastOperation: { type: 'byLocation' },\r\n                refreshing: false\r\n            });\r\n            console.log(result);\r\n        });\r\n    }\r\n\r\n    // Funcao utilizando a API do Open Weather com Query\r\n    getWeatherByQuery = (evt) => {\r\n        if ((evt.key === \"Enter\") || (evt === \"refresh\" && evt.key === undefined)){\r\n            fetch(`//${this.state.openWeatherAPI}weather?q=${this.state.query}&appid=${this.state.openWeatherKey}&units=metric&lang=pt_br`)\r\n            .then(res => res.json())\r\n            .then(result => {\r\n                this.setState({\r\n                    weather: result,\r\n                    lastOperation: { \r\n                        type: 'byQuery',\r\n                        q: this.state.query // Salvando ultima query\r\n                    },\r\n                    query: '',\r\n                    refreshing: false\r\n                });\r\n\r\n                console.log(result);\r\n            });\r\n        }\r\n    }\r\n\r\n    triggerPositionQuery = () =>{\r\n        this.getBrowserPosition()\r\n            .then((position) => {      \r\n                this.getWeatherByLocation(position.coords.latitude, position.coords.longitude)\r\n        })\r\n        .catch((err) => {\r\n            alert(\"Ops! Ocorreu um erro ao pesquisar a temperatura da sua localidade atual. Verifique se o seu navegador está habilitado.\");\r\n        });\r\n    }\r\n\r\n    refreshLastWeather = () =>{\r\n        if (this.state.lastOperation.type === \"byLocation\"){\r\n            this.setState({\r\n                refreshing: true\r\n            },() => {\r\n                this.triggerPositionQuery();\r\n            });            \r\n        }\r\n        else{\r\n            this.setState({\r\n                refreshing: true,\r\n                query: this.state.lastOperation.q // Recuperando Query antiga\r\n            },() => {\r\n                this.getWeatherByQuery(\"refresh\");\r\n            });\r\n        }\r\n    }\r\n\r\n    // Funcao disparada logo apos o React montar o componente\r\n    componentDidMount(){\r\n        this.triggerPositionQuery();\r\n    }\r\n\r\n    // Renderizacao do Componente\r\n    render(){\r\n        return (\r\n            // ClassName condicionado baseado na informacao do this.state.weather\r\n            <div className={\r\n                (typeof this.state.weather.main != \"undefined\") \r\n                  ? ((this.state.weather.main.temp > 16) \r\n                    ? 'app warm' \r\n                    : 'app') \r\n                  : 'app'\r\n                }\r\n            >          \r\n                <main>\r\n                    {/* Search Box Funcional */}\r\n                    <div className=\"search-box\">\r\n                        <input \r\n                            type='text'\r\n                            className='search-bar'\r\n                            placeholder='Digite um local e pressione \"Enter\"...'\r\n                            onChange={e => this.setState({query: e.target.value})}\r\n                            value={this.state.query}\r\n                            onKeyPress={this.getWeatherByQuery}\r\n                        />\r\n                    </div>\r\n\r\n                    {/* Function Componente: Weather Item */}\r\n                    {( typeof this.state.weather.main != \"undefined\") ? (\r\n                        <div className='weather-item-container'>\r\n                            <WeatherItem data={this.state.weather}/>\r\n\r\n                            {/* Botão para atualizar temperatura de acordo com última query */}\r\n                            { (this.state.refreshing) ? <p className=\"refresh-p\">Atualizando...</p> \r\n                            :                             \r\n                            <button \r\n                                onClick={this.refreshLastWeather}\r\n                                className='refresh-btn'\r\n                            >\r\n                                Atualizar\r\n                            </button>}                            \r\n                        </div>\r\n                    ) : ('')}\r\n                </main>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Dashboard;","import React from 'react';\r\n\r\nimport Dashboard from './components/dashboard/dashboard.component';\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <Dashboard />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}